services:
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    network_mode: host
    restart: unless-stopped
    environment:
      TZ: Europe/Vienna
      FTLCONF_webserver_api_password: ${PIHOLE_WEBPASSWORD}
      FTLCONF_webserver_port: '8081,8443os,[::]:8081,[::]:8443os'
      FTLCONF_dns_upstreams: "1.1.1.1;1.0.0.1"
      FTLCONF_dns_listeningMode: all
    cap_add:
      - SYS_NICE
      - SYS_TIME
    volumes:
      - pihole_data:/etc/pihole
      - dnsmasq_data:/etc/dnsmasq.d

  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - monitoring
      - default
    depends_on:
      - vaultwarden
      - wikijs
      - immich_server
      - nextcloud
      - grafana

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
    volumes:
      - vaultwarden_data:/data

  wikijs:
    image: requarks/wiki:latest
    container_name: wikijs
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - DB_TYPE=postgres
      - DB_HOST=wikijs_db
      - DB_PORT=5432
      - DB_USER=wikijs
      - DB_PASS=wikijs
      - DB_NAME=wikijs
    depends_on:
      - wikijs_db

  wikijs_db:
    image: postgres:13
    container_name: wikijs_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=wikijs
      - POSTGRES_USER=wikijs
      - POSTGRES_PASSWORD=wikijs
    volumes:
      - wikijs_db_data:/var/lib/postgresql/data

  immich_server:
    image: ghcr.io/immich-app/immich-server:release
    container_name: immich_server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379
    volumes:
      - /mnt/immich-bulk/immich-data/upload:/usr/src/app/upload
      - /mnt/immich-bulk/immich-data/library:/usr/src/app/library
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "2283:2283"
    depends_on:
      - immich_db
      - redis
    healthcheck:
      disable: false

  immich_machine_learning:
    image: ghcr.io/immich-app/immich-machine-learning:release
    container_name: immich_machine_learning
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
    volumes:
      - /mnt/immich-bulk/immich-data/cache:/cache
    depends_on:
      - redis
    healthcheck:
      disable: false

  immich_db:
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:5f6a838e4e44c8e0e019d0ebfe3ee8952b69afc2809b2c25f7b0119641978e91
    container_name: immich_db
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=immich
      - POSTGRES_USER=immich
      - POSTGRES_DB=immich
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - immich_db_data:/var/lib/postgresql/data
    shm_size: 128mb

  redis:
    image: docker.io/valkey/valkey:8-bookworm@sha256:fec42f399876eb6faf9e008570597741c87ff7662a54185593e74b09ce83d177
    container_name: immich_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 30s
      timeout: 5s
      retries: 5

  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    ports:
      - "8082:80"
    volumes:
      - nextcloud_data:/var/www/html
      - /mnt/media:/external_media
    environment:
      - MYSQL_HOST=nextcloud_db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=nextcloud
    depends_on:
      - nextcloud_db

  nextcloud_db:
    image: mariadb:10.6
    container_name: nextcloud_db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=nextcloud
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=nextcloud
    volumes:
      - nextcloud_db_data:/var/lib/mysql

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - monitoring
      - default
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yaml:/etc/promtail/config.yml:ro
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9080:9080"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc)($|/)"
    ports:
      - "9100:9100"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - monitoring

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - monitoring

  tasmota_exporter:
    image: eugenezadyra/tasmota-exporter:latest
    container_name: tasmota_exporter
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - MQTT_HOSTNAME=mosquitto
      - MQTT_PORT=1883
      - PROMETHEUS_EXPORTER_PORT=9092
      - MQTT_TOPIC=tele/+/SENSOR
      - MQTT_TOPICS=tele/#, stat/#
    depends_on:
      - mosquitto
    networks:
      - monitoring

  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    ports:
      - "61208:61208"
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - GLANCES_OPT=-w
    networks:
      - monitoring

  glance:
    image: glanceapp/glance:latest
    container_name: glance
    restart: unless-stopped
    dns:
      - 192.168.178.10
    ports:
      - "3010:8080"
    volumes:
      - ./glance:/app/config
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - monitoring

  disk_usage_api:
    image: disk_usage_api
    container_name: disk_usage_api
    restart: unless-stopped
    environment:
      NVME_PATH: /mnt/root
      SSD_PATH: /mnt/immich-bulk
    volumes:
      - /:/mnt/root:ro
      - /mnt/immich-bulk:/mnt/immich-bulk:ro
    ports:
      - "8000:8000"
  
  plug_control:
    build: ./plugcontrol
    container_name: plug_control
    ports:
      - "3500:3500"
    restart: unless-stopped
  
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    privileged: true
    network_mode: host
    environment:
      - TZ=Europe/Vienna
    volumes:
      - homeassistant_config:/config
      - /etc/localtime:/etc/localtime:ro

volumes:
  pihole_data:
  dnsmasq_data:
  caddy_data:
  caddy_config:
  vaultwarden_data:
  wikijs_db_data:
  immich_db_data:
  nextcloud_data:
  nextcloud_db_data:
  prometheus_data:
  grafana_data:
  portainer_data:
  homeassistant_config:


networks:
  monitoring:
    driver: bridge
